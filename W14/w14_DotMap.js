// w14_DotMap.js

const dotMapData = [
    [1, 34.5295, 134.5176681, 34.52950734, 134.5173519, 34.52933765, 134.5175721, 34.52944641, 134.5176405, 34.5293, 134.5175424, 34.52927068, 134.5175322],
    [2, 34.5295, 134.51767, 34.52950038, 134.517368, 34.52931091, 134.5175711, 34.52944572, 134.5176242, 34.52929212, 134.5175462, 34.52927068, 134.5175281],
    [3,34.5295,134.5176675,34.52950005,134.5175118,34.52930242,134.5175681,34.52944571,134.5175771,34.52929316,134.5175459,34.52927,134.5175319],
    [4,34.52950064,134.5176698,34.52949999,134.5176313,34.52930089,134.5175687,34.5294557,134.5176008,34.52929579,134.5175457,34.52927,134.5175358],
    [5,34.52949467,134.5176924,34.52949765,134.5176383,34.52930717,134.5175736,34.52946205,134.5176388,34.52929829,134.5175477,34.52929192,134.5175372],
    [6,34.5294813,134.5176921,34.52949842,134.5176293,34.52933411,134.5176137,34.52947021,134.5176111,34.52929808,134.5175537,34.52935562,134.5175394],
    [7,34.52948434,134.5176819,34.52950067,134.5176382,34.52936612,134.5176531,34.52948632,134.5175669,34.52930103,134.517559,34.52939852,134.5175548],
    [8,34.52949329,134.517671,34.52949993,134.5176507,34.52938641,134.5176572,34.52949571,134.5175454,34.52930508,134.5175637,34.52940324,134.5175823],
    [9,34.52949136,134.5176543,34.52949997,134.5176547,34.52940633,134.5176345,34.52949256,134.5175361,34.52933453,134.5175414,34.52941594,134.517596],
    [10,34.52949514,134.5176709,34.52950007,134.5176565,34.52939808,134.5176433,34.52948909,134.5175428,34.52933749,134.5175345,34.5294196,134.5176006],
    [11,34.5295,134.517687,34.5294968,134.5176575,34.52938271,134.517677,34.52949023,134.517544,34.52930686,134.5175595,34.52944494,134.5175848],
    [12,34.5295,134.5176856,34.52949132,134.5176612,34.52938645,134.517677,34.52948845,134.5175276,34.52930212,134.5175669,34.52948701,134.5175589],
    [13,34.5295,134.5176824,34.5294946,134.5176553,34.52938446,134.5176621,34.52948822,134.5174821,34.52930431,134.5175661,34.52948436,134.5175614],
    [14,34.52949924,134.5176819,34.5295,134.5176501,34.52938076,134.5176635,34.52949166,134.51748,34.52930839,134.5175647,34.52946008,134.5175774],
    [15,34.52949908,134.5176847,34.52950008,134.5176565,34.52938552,134.5176686,34.52948388,134.5175631,34.52930937,134.5175624,34.5294747,134.5175629],
    [16,34.52949823,134.5176854,34.52950072,134.517652,34.52938778,134.5176504,34.52947182,134.5175725,34.52930276,134.5175608,34.52949828,134.517545],
    [17,34.52948747,134.5176896,34.52950211,134.5176472,34.5293887,134.5176518,34.52947338,134.5175749,34.52930287,134.5175629,34.52947064,134.5175899],
    [18,34.52948902,134.5176869,34.52949851,134.5176683,34.52939182,134.5176566,34.52948011,134.5176037,34.52931494,134.5175685,34.52945164,134.5176269],
    [19,34.52949994,134.5176777,34.52949233,134.5176889,34.52939427,134.5176505,34.52948304,134.5175833,34.52932337,134.5175741,34.52945602,134.5176168],
    [20,34.5295,134.5176772,34.52949924,134.5176764,34.52939957,134.5176449,34.52948298,134.5175915,34.52932723,134.5175812,34.52947283,134.5175912],
    [21,34.52949688,134.5176853,34.52950464,134.5176591,34.52938541,134.5176191,34.52947895,134.517605,34.52932758,134.5175813,34.52945361,134.517612],
    [22,34.52949167,134.5177041,34.5295007,134.5176528,34.52936634,134.5175958,34.52947152,134.5176108,34.5293268,134.5175785,34.52945402,134.5176092],
    [23,34.52949478,134.5177051,34.5295,134.5176463,34.52937629,134.5175985,34.52946331,134.5176144,34.52932783,134.5175838,34.52949232,134.5175689],
    [24,34.52949502,134.5176935,34.52950014,134.5176478,34.52938807,134.5176047,34.52946331,134.5176557,34.52932751,134.5175832,34.52949222,134.5175663],
    [25,34.52949272,134.5176985,34.52950149,134.517657,34.52938568,134.5176001,34.52946964,134.5176928,34.52932586,134.5175744,34.52949284,134.5175597]
  ];

// Function to create a DotMap
function createDotMap(data) {
    // Extract necessary data from the CSV file
    const timestamps = data.map(row => row.Time);
    const headers = Object.keys(data[0]).slice(1); // Skip the first column (Time)
    const rows = data.map(row => headers.map(header => +row[header]));

    // Set up the DotMap dimensions
    const margin = { top: 10, right: 30, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    // Create scales for X and Y axes
    const xScale = d3.scaleLinear()
        .domain([timestamps[0], timestamps[timestamps.length - 1]])
        .range([0, width]);

    const yScale = d3.scaleLinear()
        .domain([0, d3.max(rows.flat())])
        .range([height, 0]);

    // Create SVG container for DotMap
    const dotMap = d3.select('#dotmap-container')
        .append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom);

    const g = dotMap.append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);

    // Create groups for each data point
    const dots = g.selectAll('g')
        .data(rows)
        .enter().append('g')
        .attr('transform', (d, i) => `translate(${xScale(timestamps[i])},${yScale(d[1])})`);

    // Append circles to represent data points
    dots.selectAll('circle')
        .data(d => d.slice(1))
        .enter().append('circle')
        .attr('cy', d => yScale(d))
        .attr('r', 3)
        .attr('fill', 'steelblue');

    // Adding tooltip for each dot
    dots.append('title')
        .text((d, i) => {
            const time = new Date(timestamps[i] * 1000).toLocaleTimeString();
            return `Timestamp: ${time}\n${headers.map((h, j) => `${h}: ${d[j + 1]}`).join('\n')}`;
        });

    // X-axis
    g.append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(xScale).ticks(timestamps.length));

    // X-axis label
    g.append('text')
        .attr('x', width / 2)
        .attr('y', height + margin.top + 20)
        .style('text-anchor', 'middle')
        .text('Timestamp');
}

// Export the function for external use
export { createDotMap };